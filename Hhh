-- MaintenanceGate.server.lua (ch·ªâ c·∫ßn 1 script)
local Players = game:GetService("Players")
local DataStoreService = game:GetService("DataStoreService")

-- C·∫§U H√åNH
local MESSAGE = "Game ƒëang b·∫£o tr√¨. Vui l√≤ng quay l·∫°i sau."
local YOUR_USERID = 7491100036 -- B·∫°n (tuananhfreefire123)
local BAN_STORE = DataStoreService:GetDataStore("GlobalBan_v1")

-- H√ÄM BAN
local function isBanned(uid)
    local ok, value = pcall(function()
        return BAN_STORE:GetAsync("ban_"..uid)
    end)
    return ok and value == true
end

local function setBanned(uid, state)
    pcall(function()
        BAN_STORE:SetAsync("ban_"..uid, state == true)
    end)
end

-- X·ª¨ L√ù NG∆Ø·ªúI CH∆†I
Players.PlayerAdded:Connect(function(player)
    local uid = player.UserId

    -- N·∫øu l√† b·∫°n ‚Üí cho v√†o + g·ª° ban n·∫øu l·ª° b·ªã
    if uid == YOUR_USERID then
        setBanned(uid, false)
        return
    end

    -- Ban t·∫•t c·∫£ ng∆∞·ªùi kh√°c
    if isBanned(uid) then
        player:Kick(MESSAGE)
    else
        setBanned(uid, true)
        player:Kick(MESSAGE)
    end
end)	while true do
		for _, info in ipairs(pages:GetCurrentPage()) do
			local key = info.KeyName
			local rok, rerr = pcall(function() ds:RemoveAsync(key) end)
			if rok then
				cnt += 1
				print(("[DS] ƒê√É X√ìA %s [scope='%s'] / key='%s'"):format(storeName, scope, key))
			else
				warn(("[DS] L·ªñI xo√° %s [scope='%s'] / key='%s' ‚Üí %s"):format(storeName, scope, key, tostring(rerr)))
			end
			task.wait()
		end
		if pages.IsFinished then break end
		if not tryAdvance(pages) then break end
	end
	return cnt
end

local function wipeOrderedDataStore(storeName, scope)
	scope = scope or ""
	local ods = DSS:GetOrderedDataStore(storeName, scope)
	local ok, pages = pcall(function()
		-- false = tƒÉng d·∫ßn; min=-inf max=+inf ƒë·ªÉ qu√©t to√†n b·ªô
		return ods:GetSortedAsync(false, 100, -math.huge, math.huge)
	end)
	if not ok then
		warn(("[ODS] Kh√¥ng th·ªÉ li·ªát k√™ key: '%s' [scope='%s'] ‚Üí %s"):format(storeName, scope, tostring(pages)))
		return 0
	end
	local total = 0
	while true do
		for _, item in ipairs(pages:GetCurrentPage()) do
			local key = item.key
			local rok, rerr = pcall(function() ods:RemoveAsync(key) end)
			if rok then
				total += 1
				print(("[ODS] ƒê√É X√ìA %s [scope='%s'] / key='%s'"):format(storeName, scope, key))
			else
				warn(("[ODS] L·ªñI xo√° %s [scope='%s'] / key='%s' ‚Üí %s"):format(storeName, scope, key, tostring(rerr)))
			end
			task.wait()
		end
		if pages.IsFinished then break end
		if not tryAdvance(pages) then break end
	end
	return total
end

local function listAllDataStores()
	local ok, pages = pcall(function() return DSS:ListDataStoresAsync() end)
	if not ok then
		warn("‚ùå Kh√¥ng th·ªÉ ListDataStoresAsync. Th∆∞·ªùng do CH∆ØA b·∫≠t 'Enable Studio Access to API' ho·∫∑c game CH∆ØA Publish.")
		return nil, pages
	end
	local names = {}
	while true do
		for _, info in ipairs(pages:GetCurrentPage()) do
			table.insert(names, info.Name)
		end
		if pages.IsFinished then break end
		if not tryAdvance(pages) then break end
	end
	return names
end

-- 1) Th·ª≠ li·ªát k√™ t·∫•t c·∫£ DS trong experience
local storeNames, listErr = listAllDataStores()

if storeNames and #storeNames > 0 then
	print("‚úÖ T√¨m th·∫•y DataStore:", table.concat(storeNames, ", "))
	local total = 0
	for _, name in ipairs(storeNames) do
		-- Qu√©t default scope tr∆∞·ªõc; n·∫øu b·∫°n d√πng nhi·ªÅu scope, th√™m v√†o ƒë√¢y
		total += wipeStandardDataStore(name, "")
		total += wipeOrderedDataStore(name, "")
	end
	print(("=== HO√ÄN T·∫§T: XO√Å %d key (DS + ODS) trong to√†n experience (default scope) ==="):format(total))
elseif storeNames and #storeNames == 0 then
	warn("‚ö†Ô∏è List OK nh∆∞ng KH√îNG c√≥ DataStore n√†o. C√≥ th·ªÉ b·∫°n ch∆∞a t·ª´ng l∆∞u (SetAsync) d·ªØ li·ªáu th·∫≠t trong game n√†y.")
else
	-- 2) FALLBACK: Kh√¥ng list ƒë∆∞·ª£c DS ‚Üí d√πng danh s√°ch th·ªß c√¥ng
	warn("‚õëÔ∏è FALLBACK: d√πng danh s√°ch DS th·ªß c√¥ng (FALLBACK_STORES).")
	if #FALLBACK_STORES == 0 then
		warn("üëâ H√£y ƒëi·ªÅn t√™n DataStore b·∫°n ƒë√£ d√πng v√†o FALLBACK_STORES ·ªü ƒë·∫ßu script (v√≠ d·ª•: 'PlayerData').")
	else
		local total = 0
		for _, def in ipairs(FALLBACK_STORES) do
			local scopes = def.scopes or {""}
			for _, sc in ipairs(scopes) do
				total += wipeStandardDataStore(def.name, sc)
				total += wipeOrderedDataStore(def.name, sc)
			end
		end
		print(("=== HO√ÄN T·∫§T (FALLBACK): XO√Å %d key t·ª´ danh s√°ch th·ªß c√¥ng ==="):format(total))
	end
end

-- D·ªçn Workspace t·∫°m th·ªùi (kh√¥ng vƒ©nh vi·ªÖn, ch·ªâ trong phi√™n)
for _, obj in ipairs(workspace:GetChildren()) do
	if not obj:IsA("Terrain") then obj:Destroy() end
end
print("Workspace ƒë√£ d·ªçn (t·∫°m th·ªùi). XONG.")do
	local ok, pages = pcall(function() return DSS:ListDataStoresAsync() end)
	if not ok then error("Kh√¥ng li·ªát k√™ ƒë∆∞·ª£c DataStore. B·∫≠t 'Enable Studio Access to API' r·ªìi th·ª≠ l·∫°i.") end
	repeat
		for _, info in ipairs(pages:GetCurrentPage()) do table.insert(stores, info.Name) end
	until pages.IsFinished or (pcall(function() pages:AdvanceToNextPageAsync() end) and false)
end

if #stores == 0 then
	warn("Kh√¥ng t√¨m th·∫•y DataStore n√†o.")
else
	print("T√¨m th·∫•y:", table.concat(stores, ", "))
	for _, n in ipairs(stores) do wipeDS(n); wipeODS(n) end
	print("=== HO√ÄN T·∫§T: M·ªåI DATASTORE ƒê√É B·ªä XO√Å Vƒ®NH VI·ªÑN ===")
end
